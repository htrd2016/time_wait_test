#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#include <pthread.h>
#define MAX_CLIENT 2048

int g_client_sockets[MAX_CLIENT];
int g_client_number = 0;

int g_command_server_sock = 0;
int g_server_sock = 0;

int g_command_server_port = 0;
int g_sleep_time = 10;

int create_server(int *sock, int listen_port, struct sockaddr_in* paddr);

void init_client_sockets()
{
  g_client_number = 0;
  int i=0;
  for(i=0; i<MAX_CLIENT;i++)
  {
    g_client_sockets[0] = 0;
  }
}

int multi_clients_close(int count)
{
  int i = g_client_number - 1;
  int min = g_client_number-count-1;
  for(;i>min&&i>=0;i--)
  {
    close(g_client_sockets[i]);
    g_client_number--;
  }

  if(g_client_number<0)
  {
     g_client_number = 0;
  }

  printf("after close:left client socket:%d\n", g_client_number);
  return 0;
}

void *create_command_server_by_thread(void *arg)  
{
  sleep(g_sleep_time);
  
  multi_clients_close(g_client_number);
  printf("end of server\n");
  exit(0);

  /*struct sockaddr_in addr;
  int client_sock = -1;
  char buffer[1024];
  size_t recv_len = 0;
  unsigned int len = sizeof(struct sockaddr_in);
  int count = 0; 
  if (0 == create_server(&g_command_server_sock, g_command_server_port, &addr))
  {
    for(;;)
    {
      client_sock = accept(g_command_server_sock, (struct sockaddr*)&addr, &len);
      printf("new command connection ...\n");
      if(client_sock<=0)
      {
        printf("%s\n", strerror(errno));
        close(g_command_server_sock);
        return ((void*)0);
      }
      memset(buffer, 0, 1024);
      if((recv_len=recv(client_sock, buffer, 1024, 0))<=0)
      {
        printf("%s\n", strerror(errno));
        close(client_sock);
        break;
      }

      printf("recv:%s\n", buffer);
      if(strstr(buffer, "close:") != 0)
      {
        printf("%s\n", buffer);
        count = atoi(buffer+strlen("close:"));
        printf("count:%d\n", count);
        multi_clients_close(count);
      }
      else
      {
        printf("error command:%s\n", buffer);
        sprintf(buffer, "please send like \"close:10\"\n");
        write(client_sock, buffer, strlen(buffer)+1);
      }
      close(client_sock);
    }
  }*/

  printf("end of command socket!!!!\n");

  return ((void *)0);
}

int create_server(int *sock, int listen_port, struct sockaddr_in* paddr)
{
  unsigned int len = sizeof(struct sockaddr_in);
  int on = 1;

  *sock = socket(PF_INET, SOCK_STREAM, 0);
  if(*sock<=0)
  {
    printf("%s\n", strerror(errno));
    return -1;
  }
  memset(paddr, 0, len);
  paddr->sin_family = AF_INET;
  paddr->sin_addr.s_addr = htonl(INADDR_ANY);
  paddr->sin_port = htons(listen_port);  
  
  if((setsockopt(*sock, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)))<0)
  {
     perror("setsockopt failed");
     return -1;
  }

  if(bind(*sock, (struct sockaddr*)paddr, len)<0)
  {
    printf("%s\n", strerror(errno));
    close(*sock);
    return -1;
  }

  if(listen(*sock, 1)<0)
  {
    printf("%s\n", strerror(errno));
    close(*sock);
    return -1;
  }
  return 0;
}

int main(int argc, char *argv[])
{
  int listen_port;
  struct sockaddr_in addr;
  unsigned int len = sizeof(addr);
  pthread_t ntid;
  int temp;
  
  if(argc<3)
  {
    printf("use age<path><port to listen><time to disconnect afetr connected>\n");
    return -1;
  }
  
  listen_port = atoi(argv[1]);  
  //g_command_server_port = atoi(argv[2]);
  g_sleep_time = atoi(argv[2]);
  printf("listen on port %d, and command port is %d\n", listen_port, g_command_server_port); 
  init_client_sockets();

  if((temp=pthread_create(&ntid, NULL, create_command_server_by_thread, NULL))!= 0)  
  {  
    printf("can't create thread: %s\n",strerror(temp));  
    return -1;  
  }  

  if(0==create_server(&g_server_sock, listen_port, &addr))
  {
    printf("listening on port %d\n", listen_port);
    for(;;)
    {
      g_client_sockets[g_client_number] = accept(g_server_sock, (struct sockaddr*)&addr, &len);
      printf("new connection ...\n");
      if(g_client_sockets[g_client_number]<=0)
      {
        printf("%s\n", strerror(errno));
        close(g_server_sock);
        sleep(100);
        return -1;
      }
      g_client_number++;
      printf("client count =%d\n", g_client_number);
    }

    close(g_server_sock);
  }

  return 0;
}
